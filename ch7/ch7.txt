slices:
  featuredPrices := prices[1:3] // indexes 1 and 2
  featuredPrices := prices[:3] // first 0:3
  featuredPrices := prices[1:] // first 1:end
  slices are windows of the same array
  len(featuredPrices) // length
  len(featuredPrices) // capacity // capacity is length from the first index for the slice till the end of the original array, you can't select more items to the left

  prices := []float64{10.99, 8.99} // this syntax create a slice and go create a slice bhind the scenes
  prices = prices[1:] // removes the first element
  fmt.Println(prices[1])

  prices = append(prices, 5.99) // go will create a new array and add this element to the new array
  fmt.Println(prices)
  // I can extend a slice if it has some values to the right available
  mainHobbies = mainHobbies[1:3]
  // merge 2 slices
  prices = append(prices, discountPrices...)


userNames := make([]string, 2, 5) // 2 is length, 5 is capacity, when we need more space then go will add another 5 capacity
courseRatings := make(map[string]float64, 3)

courseRatings := make(map[string]float64, 3)
alternatively:
  type floatMap map[string]float64
  courseRatings := make(floatMap, 3)

// for array and maps // you can name it key instead of index for better naming when iterating over a map
for index, value := range userNames {
  fmt.Println("Index:", index)
  fmt.Println("Value:", value)
}


