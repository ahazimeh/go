// interface with 1 method as convension is typically called the name of method ending with er
type saver interface {
  Save() error
}

func saveData(data saver) {
}


// embedded interfaces
type saver interface {
  Save() error
}
type outputtable interface {
  saver
  Display()
}

// for any
interface{} or any

// different conditions when we use type any
func printSomething(value interface{}) {
  intVal, ok :=value.(int)

  if ok {
		fmt.Println("Integer:", intVal)
    return;
  }

  floatVal, ok :=value.(float64)

  if ok {
		fmt.Println("Float:", floatVal)
    return;
  }

  stringVal, ok :=value.(float64)

  if ok {
		fmt.Println("String:", stringVal)
    return;
  }

	/* switch value.(type) {
	case int:
		fmt.Println("Integer:", value)
	case float64:
		fmt.Println("Float:", value)
	case string:
		fmt.Println(value)
	default:
		// ...
	} */

	fmt.Println(value)
}


// generics
result := add(1,2)
fmt.Println(result)

func add[T int|float64|string](a, b T) T {
  return a + b
}
